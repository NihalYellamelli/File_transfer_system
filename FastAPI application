from fastapi import FastAPI, Depends, HTTPException, File, UploadFile, BackgroundTasks
from sqlalchemy.orm import Session
from fastapi.security import OAuth2PasswordBearer
import os
from database import SessionLocal, engine
from models import User, File, DownloadLink
from schemas import UserCreate, UserResponse, FileUpload, FileResponse, LoginResponse, DownloadLinkResponse, DownloadLinkRequest
from utils import hash_password, verify_password, create_access_token, verify_access_token, generate_encrypted_url
from datetime import timedelta

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")


# Dependency to get the DB session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


# Authentication and User Management
@app.post("/auth/signup", response_model=UserResponse)
def signup(user: UserCreate, db: Session = Depends(get_db)):
    existing_user = db.query(User).filter(User.email == user.email).first()
    if existing_user:
        raise HTTPException(status_code=400, detail="Email already registered")

    hashed_password = hash_password(user.password)
    new_user = User(username=user.username, email=user.email, password_hash=hashed_password)
    db.add(new_user)
    db.commit()
    db.refresh(new_user)

    encrypted_url = generate_encrypted_url(new_user.id)
    return {"id": new_user.id, "username": new_user.username, "email": new_user.email, "role": new_user.role, "email_verified": new_user.email_verified}


@app.post("/auth/login", response_model=LoginResponse)
def login(user: UserCreate, db: Session = Depends(get_db)):
    db_user = db.query(User).filter(User.email == user.email).first()
    if not db_user or not verify_password(user.password, db_user.password_hash):
        raise HTTPException(status_code=401, detail="Invalid credentials")

    access_token = create_access_token(data={"sub": db_user.email, "user_id": db_user.id, "role": db_user.role})
    return {"token": access_token}


# File Management (for Ops user only)
@app.post("/files/upload", response_model=FileResponse)
def upload_file(file: UploadFile = File(...), db: Session = Depends(get_db), token: str = Depends(oauth2_scheme)):
    payload = verify_access_token(token)
    if not payload or payload.get("role") != "ops":
        raise HTTPException(status_code=403, detail="Permission denied")

    file_path = f"uploads/{file.filename}"
    with open(file_path, "wb") as f:
        f.write(file.file.read())

    new_file = File(filename=file.filename, file_path=file_path, uploaded_by_id=payload["user_id"])
    db.add(new_file)
    db.commit()
    db.refresh(new_file)
    
    return {"id": new_file.id, "filename": new_file.filename}


@app.get("/files/download/{file_id}", response_model=DownloadLinkResponse)
def download_file(file_id: int, db: Session = Depends(get_db), token: str = Depends(oauth2_scheme)):
    payload = verify_access_token(token)
    if not payload:
        raise HTTPException(status_code=401, detail="Invalid token")

    file = db.query(File).filter(File.id == file_id).first()
    if not file:
        raise HTTPException(status_code=404, detail="File not found")
    
    download_link = db.query(DownloadLink).filter(DownloadLink.file_id == file.id, DownloadLink.client_user_id == payload["user_id"]).first()
    if not download_link:
        raise HTTPException(status_code=403, detail="Permission denied to download the file")
    
    return {"download_url": f"/files/{file.id}?token={download_link.token}"}


@app.get("/files", response_model=List[FileResponse])
def list_files(db: Session = Depends(get_db), token: str = Depends(oauth2_scheme)):
    payload = verify_access_token(token)
    if not payload:
        raise HTTPException(status_code=401, detail="Invalid token")

    files = db.query(File).filter(File.uploaded_by_id == payload["user_id"]).all()
    return files
